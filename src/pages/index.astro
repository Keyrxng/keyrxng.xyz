---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from 'astro:content';
const work = await getCollection('work');
const posts = await getCollection('writing');
const latestPosts = posts
  .sort((a, b) => new Date(b.data.publishedAt).getTime() - new Date(a.data.publishedAt).getTime())
  .slice(0, 3);

// Fetch a small selection of public GitHub repositories at build time.
// Respects an optional GITHUB_TOKEN (import.meta.env or process.env) to avoid strict rate limits.
const githubUser = 'Keyrxng';
const githubToken = import.meta.env.GITHUB_TOKEN || process.env.GITHUB_TOKEN;
let latestRepos: {
  name: string;
  description: string;
  url: string;
  language: string;
  stars: number;
  homepage: string;
}[] = [];
try {
  const headers = githubToken
    ? { Authorization: `token ${githubToken}`, Accept: 'application/vnd.github+json' }
    : { Accept: 'application/vnd.github+json' };
  const url = `https://api.github.com/users/${githubUser}/repos?per_page=6&sort=updated`;
  const init: RequestInit = { headers: headers as HeadersInit };
  const res = await fetch(url, init);
  const ignoreRepos =[
    "keyrxng", 
    "keyrxng.xyz" 
  ]
  if (res.ok) {
    const data = await res.json();
    latestRepos = Array.isArray(data)
      ? data
          .filter((r) => !r.fork)
          .filter((r) => !ignoreRepos.includes(r.name.toLowerCase()))
          .slice(0, 4)
          .map((r) => ({
            name: r.name,
            description: r.description,
            url: r.html_url,
            language: r.language,
            stars: r.stargazers_count,
            homepage: r.homepage,
          }))
      : [];
  } else {
    console.warn('Failed to fetch GitHub repos:', res.status, await res.text());
  }
} catch (err) {
  console.warn('Error fetching GitHub repos:', err);
}
---
  <BaseLayout title="Keyrxng — Software engineer: AI, Web3, systems & tooling" description="I design and harden pragmatic software systems across AI, Web3, and tooling—shipping fast without sacrificing reliability.">
  <section style="max-width: var(--container-wide);">
    <div style="display: grid; grid-template-columns: 1fr 300px; gap: var(--space-8); align-items: start; margin-bottom: var(--space-8);">
      <div class="stack">
  <h1 style="font-size: clamp(40px, 6vw, 56px);line-height:1.1;margin:0 0 var(--space-5);">Ship dependable software under real constraints.</h1>
  <p style="color:var(--color-muted);font-size: var(--font-size-4);margin:0">I turn ambiguous problem space into operating systems: sub-second payment surfaces, zero-failure RPC rotation, safe upgrade paths, and calmer release pipelines. Pragmatic first—measure, harden, move.</p>
  <p style="color:var(--color-muted);margin: var(--space-2) 0 var(--space-6); font-size: var(--font-size-2);">UK timezone · replies within 48h · currently taking new work</p>
        <div class="cluster" style="margin-top: var(--space-4);">
          <a class="primary" href="/work">See work</a>
          <a class="ghost" href="/contact">Contact</a>
          <a class="ghost" href="/stack">Stack</a>
        </div>
      </div>
      <div style="width: 300px; height: 300px; border-radius: 50%; overflow: hidden; background: color-mix(in oklab, var(--color-fg) 8%, transparent); display: grid; place-items: center;">
        <img 
          src="/kieran-patton-portrait.jpg" 
          alt="Portrait of Kieran Patton" 
          width="300" height="300"
          style="display: block; width: 100%; height: 100%; object-fit: cover;" 
          loading="eager"
        />
      </div>
    </div>
  </section>

  <div class="divider divider--soft divider--spaced" role="presentation"></div>

  <section class="stack" style="margin-top:var(--space-7);">
    <div class="cluster rotator-row" style="gap: var(--space-5); color: var(--color-muted); flex-wrap: nowrap; align-items: flex-start;">
      <div class="label-viewport"><span class="rotator-label">Problems I solve:</span></div>
      <div class="rotator-viewport" style="overflow:hidden;">
        <div class="cluster rotator-chips" style="gap: var(--space-5); flex-wrap: wrap;"></div>
      </div>
    </div>
    <style>
      .rotator-row { align-items: center; }
      .label-viewport { display: inline-grid; overflow: hidden; }
      .rotator-label { display: inline-block; will-change: clip-path, opacity; }
      .rotator-viewport { display: grid; }
      .rotator-chips { will-change: transform, opacity; }
      .slide-up-out { animation: slideUpOut 300ms ease forwards; }
      .slide-up-in { animation: slideUpIn 300ms ease forwards; }
      .label-wipe-out { animation: wipeLeftOut 300ms ease forwards; }
      .label-wipe-in { animation: wipeLeftIn 300ms ease forwards; }
      @keyframes slideUpOut { from { transform: translateY(0); opacity: 1; } to { transform: translateY(-12px); opacity: 0; } }
      @keyframes slideUpIn { from { transform: translateY(12px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
      @keyframes wipeLeftOut { from { clip-path: inset(0 0 0 0); opacity: 1; } to { clip-path: inset(0 100% 0 0); opacity: 0.6; } }
      @keyframes wipeLeftIn { from { clip-path: inset(0 100% 0 0); opacity: 0.6; } to { clip-path: inset(0 0 0 0); opacity: 1; } }
    </style>
    <script>
      (function(){
        const sets = [
          {
            label: 'Problems I solve:',
            items: [
              'Automate knowledge workflows',
              'Harden crypto-native flows',
              'Tame distributed systems',
              'Ship fast on constrained infra',
            ],
          },
          {
            label: 'Verticals:',
            items: [
              'AI products',
              'Crypto protocols',
              'Developer tooling',
              'Distributed systems',
              'Platforms & infra',
              'Public sector & OSS',
            ],
          },
        ];

  const labelEl = document.querySelector<HTMLElement>('.rotator-label');
  const chipsEl = document.querySelector<HTMLElement>('.rotator-chips');
  const viewportEl = document.querySelector<HTMLElement>('.rotator-viewport');
  if (!labelEl || !chipsEl || !viewportEl) return;

        let idx = 0;
        function render(set: { label: string; items: string[] }){
          labelEl!.textContent = set.label;
          chipsEl!.innerHTML = set.items.map((t: string) => `<span class=\"chip\">${t}</span>`).join('');
        }

        // Initial render and height lock to avoid layout shift
        render(sets[idx]);
        requestAnimationFrame(() => {
          const height = chipsEl!.offsetHeight;
          viewportEl!.style.height = height + 'px';
        });

        function rotate(){
          // Animate current out
          labelEl!.classList.remove('label-wipe-in');
          labelEl!.classList.add('label-wipe-out');
          chipsEl!.classList.remove('slide-up-in');
          chipsEl!.classList.add('slide-up-out');
          const onOut = () => {
            chipsEl!.removeEventListener('animationend', onOut);
            // Advance index and render next
            idx = (idx + 1) % sets.length;
            render(sets[idx]);
            // Recalc height in case this set is taller
            viewportEl!.style.height = chipsEl!.offsetHeight + 'px';
            // Animate next in
            labelEl!.classList.remove('label-wipe-out');
            labelEl!.classList.add('label-wipe-in');
            chipsEl!.classList.remove('slide-up-out');
            chipsEl!.classList.add('slide-up-in');
            const onIn = () => {
              chipsEl!.removeEventListener('animationend', onIn);
              chipsEl!.classList.remove('slide-up-in');
            };
            chipsEl!.addEventListener('animationend', onIn, { once: true });
          };
          chipsEl!.addEventListener('animationend', onOut, { once: true });
        }

        const intervalMs = 6000;
        let timer = setInterval(rotate, intervalMs);

        // Pause on hover/focus for readability
        viewportEl.addEventListener('mouseenter', () => { clearInterval(timer); });
        viewportEl.addEventListener('mouseleave', () => { timer = setInterval(rotate, intervalMs); });
        viewportEl.addEventListener('focusin', () => { clearInterval(timer); });
        viewportEl.addEventListener('focusout', () => { timer = setInterval(rotate, intervalMs); });
      })();
    </script>
  </section>

  <div class="divider divider--spaced" role="presentation"></div>

  <section class="stack" style="margin-top:var(--space-9);">
    <h2 style="margin:0">Latest writing</h2>
  <p style="color:var(--color-muted);margin:0">Field notes and deep dives on reliability, context shaping, and shipping with less drama.</p>
    <ul class="stack" style="list-style:none;padding:0;" data-reveal-list>
      {latestPosts.map((post) => (
        <li class="reveal-item">
          <a href={`/writing/${post.slug}`} class="a11y-link">
            <h3 style="margin:0">{post.data.title}</h3>
            <div style="display:flex;gap:10px;color:var(--color-muted);font-size:var(--font-size-2);">
              <span>{new Date(post.data.publishedAt).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</span>
              {post.data.readingTime && (<span>· {post.data.readingTime}</span>)}
            </div>
            <p style="color:var(--color-muted);margin:0">{post.data.summary}</p>
          </a>
        </li>
      ))}
    </ul>
  </section>

  <div class="divider divider--spaced" role="presentation"></div>

  <section class="stack" style="margin-top:var(--space-9);">
    <h2 style="margin:0">Latest projects</h2>
    <p style="color:var(--color-muted);margin:0">
      Whether for fun, learning, or production, here are some of my most recently active public GitHub repositories.
    </p>
    <style>
      .gh-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: var(--space-4); margin-top: var(--space-4); }
      .gh-card {
        position: relative;
        background: linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02));
        border: 1px solid rgba(255,255,255,0.06);
        backdrop-filter: blur(8px) saturate(100%);
        -webkit-backdrop-filter: blur(8px) saturate(100%);
        padding: var(--space-4);
        border-radius: 12px;
        transition: transform 300ms cubic-bezier(.2,.9,.2,1), box-shadow 300ms;
        box-shadow: 0 6px 18px rgba(10,10,10,0.15);
        display: flex; flex-direction: column; gap: 10px; min-height: 120px;
      }
      .gh-card:hover { transform: translateY(-6px) scale(1.01); box-shadow: 0 14px 30px rgba(10,10,10,0.18); }
      .gh-card .meta { display:flex; justify-content: space-between; gap: 8px; align-items: center; color: var(--color-muted); font-size: var(--font-size-2); }
      .gh-card h3 { margin: 0; font-size: var(--font-size-4); }
      .gh-card p { margin: 0; color: var(--color-muted); font-size: var(--font-size-2); line-height: 1.3; }
      .gh-badges { display:flex; gap:8px; flex-wrap:wrap; }
      .gh-badge { background: rgba(255,255,255,0.02); border: 1px solid rgba(255,255,255,0.03); padding: 6px 8px; border-radius: 999px; font-size: var(--font-size-1); color: var(--color-muted); }
      @media (prefers-reduced-motion: reduce) { .gh-card { transition: none; transform: none; } }
    </style>

    <div class="gh-grid">
      {latestRepos.length > 0 ? (
        latestRepos.slice(0,3).map((r) => (
          <a class="gh-card a11y-link" href={r.url} target="_blank" rel="noopener noreferrer">
            <div style="display:flex;justify-content:space-between;align-items:flex-start;gap:12px;">
              <h3>{r.name}</h3>
              <div class="meta">
                <span title="Stars">★ {r.stars}</span>
              </div>
            </div>
            <p>{r.description ?? 'No description provided.'}</p>
            <div style="margin-top:auto;display:flex;justify-content:space-between;align-items:center;gap:8px;">
              <div class="gh-badges">
                {r.language && <span class="gh-badge">{r.language}</span>}
                {r.homepage && <span class="gh-badge">site</span>}
              </div>
              <div style="color:var(--color-muted);font-size:var(--font-size-1);">View on GitHub →</div>
            </div>
          </a>
        ))
      ) : (
        <div style="color:var(--color-muted);">No public repositories found or GitHub API rate limited. Provide a GITHUB_TOKEN to increase quota.</div>
      )}
    </div>
  </section>

  
  <div class="divider divider--spaced" role="presentation"></div>
  <script>
    (function(){
      const items = document.querySelectorAll('.reveal-item');
      if (!items.length) return;
      const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const el = entry.target;
            if (!prefersReduced) {
              // small micro-delay to feel responsive without batching
              setTimeout(() => el.classList.add('is-visible'), 0);
            } else {
              el.classList.add('is-visible');
            }
            observer.unobserve(el);
          }
        });
      }, { threshold: 0.2, rootMargin: '0px 0px -10% 0px' });
      items.forEach((el) => observer.observe(el));
    })();
  </script>

  
</BaseLayout>
